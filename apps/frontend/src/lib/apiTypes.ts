/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List items */
        get: {
            parameters: {
                query?: {
                    /** @description Search in title/description */
                    q?: string;
                    category?: string;
                    brand?: string;
                    color?: string;
                    /** @description 'me'이면 본인 등록물만 */
                    finder?: "me";
                    limit?: number;
                    offset?: number;
                    /** @description 리스트/검색에서 좌표 반올림 노출(NFR2) */
                    mask_coords?: boolean;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponsePaginatedItems"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponseError"];
                    };
                };
            };
        };
        put?: never;
        /** Create item */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ItemCreate"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponseItemRead"];
                    };
                };
                /** @description Validation error (e.g., min 2 photos) */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponseError"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponseError"];
                    };
                };
                /** @description Forbidden (role not allowed) */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponseError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get item by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: number;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponseItemRead"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponseError"];
                    };
                };
                /** @description Not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponseError"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search (rule scoring → AI rerank) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SearchRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponseSearchResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ApiResponseError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ErrorDTO: {
            code: string;
            message: string;
        };
        ApiResponseItemRead: {
            data: components["schemas"]["ItemRead"];
            error: components["schemas"]["ErrorDTO"] | null;
        };
        ApiResponsePaginatedItems: {
            data: components["schemas"]["PaginatedItems"];
            error: components["schemas"]["ErrorDTO"] | null;
        };
        ApiResponseSearchResponse: {
            data: components["schemas"]["SearchResponse"];
            error: components["schemas"]["ErrorDTO"] | null;
        };
        ApiResponseError: {
            /** @default null */
            data: unknown;
            error: components["schemas"]["ErrorDTO"];
        };
        PhotoDTO: {
            /** Format: uri */
            url: string;
            /** Format: float */
            exif_lat?: number | null;
            /** Format: float */
            exif_lng?: number | null;
        };
        ItemCreate: {
            title: string;
            description?: string | null;
            category?: string | null;
            brand?: string | null;
            model?: string | null;
            color?: string | null;
            material?: string | null;
            pattern?: string | null;
            size_text?: string | null;
            features?: string | null;
            accessories?: string | null;
            serial_masked?: string | null;
            photos: components["schemas"]["PhotoDTO"][];
            /** Format: float */
            stored_lat?: number | null;
            /** Format: float */
            stored_lng?: number | null;
            stored_addr?: string | null;
        };
        ItemRead: components["schemas"]["ItemCreate"] & {
            /** Format: int32 */
            id: number;
            /** @enum {string} */
            status: "STORED" | "HANDED_OVER";
            /** Format: int32 */
            finder_user_id?: number | null;
            /** Format: date-time */
            created_at?: string | null;
        };
        PaginatedItems: {
            items: components["schemas"]["ItemRead"][];
            /** Format: int32 */
            total: number;
        };
        SearchRequest: {
            text: string;
            category?: string | null;
            brand?: string | null;
            color?: string | null;
            model?: string | null;
            /** Format: float */
            lat?: number | null;
            /** Format: float */
            lng?: number | null;
            /**
             * Format: float
             * @default 20
             */
            radius_km: number;
            /**
             * Format: int32
             * @default 168
             */
            since_hours: number;
            /**
             * Format: int32
             * @default 50
             */
            top_n: number;
        };
        SearchCandidate: {
            item: components["schemas"]["ItemRead"];
            /** Format: float */
            rule_score: number;
        };
        RerankResult: {
            /** Format: int32 */
            item_id: number;
            /** Format: float */
            llm_score: number;
            reason_text: string;
        };
        SearchResponse: {
            top_n: components["schemas"]["SearchCandidate"][];
            top_5: components["schemas"]["ItemRead"][];
            reasons: components["schemas"]["RerankResult"][];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
