/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/notifications/unread_count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get unread notification count (public → unauth returns 0) */
        get: operations["getUnreadNotificationCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register with email and phone */
        post: operations["register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login with email or phone */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout (invalidate token) */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get my account profile */
        get: operations["getMe"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List my items (same schema as /items but implicitly finder=me) */
        get: operations["listMyItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/{id}/claims": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create claim for an item */
        post: operations["createClaimForItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/claims": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List my claims */
        get: operations["listClaims"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/claims/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get claim by id */
        get: operations["getClaimById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List my notifications */
        get: operations["listNotifications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notifications/{id}/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mark a notification as read */
        post: operations["markNotificationRead"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/items/{id}/handover": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** State transition:STORED → CLAIMED → HANDED_OVER */
        patch: operations["handoverItem"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ErrorDTO: {
            /**
             * @description 백엔드에서 정의된 고유 에러 코드
             * @example AUTH_UNAUTHORIZED
             */
            code: string;
            /** @example Invalid token or session expired. */
            message: string;
        };
        ApiResponseError: {
            data: unknown;
            error: components["schemas"]["ErrorDTO"];
        };
        ItemRead: {
            /** Format: int64 */
            id: number;
            /** @example 아이폰 13 프로 */
            title: string;
            description?: string | null;
            /**
             * @example STORED
             * @enum {string}
             */
            status: "STORED" | "HANDED_OVER";
            /**
             * Format: int64
             * @description 습득한 사용자의 ID
             */
            finder_user_id: number;
            /** Format: date-time */
            created_at: string;
        };
        PaginatedItems: {
            items: components["schemas"]["ItemRead"][];
            /** Format: int32 */
            total: number;
        };
        ApiResponseItemRead: {
            data: components["schemas"]["ItemRead"];
            error: components["schemas"]["ErrorDTO"] | null;
        };
        ApiResponsePaginatedItems: {
            data: components["schemas"]["PaginatedItems"];
            error: components["schemas"]["ErrorDTO"] | null;
        };
        UnreadCount: {
            unread_count: number;
        };
        ApiResponseUnreadCount: {
            data: components["schemas"]["UnreadCount"];
            error: components["schemas"]["ErrorDTO"] | null;
        };
        Notification: {
            /** Format: int64 */
            id: number;
            /** @example CLAIM_STATUS_CHANGED */
            type: string;
            title?: string | null;
            body?: string | null;
            /** Format: date-time */
            created_at: string;
            /** @default false */
            read: boolean;
        };
        NotificationList: {
            notifications: components["schemas"]["Notification"][];
            /** Format: int32 */
            total: number;
        };
        ApiResponseNotificationList: {
            data: components["schemas"]["NotificationList"];
            error: components["schemas"]["ErrorDTO"] | null;
        };
        AuthRegisterRequest: {
            /** Format: email */
            email: string;
            phone: string;
            password: string;
        };
        AuthLoginRequest: {
            /** @description email or phone */
            identifier: string;
            password: string;
        };
        AuthToken: {
            access_token: string;
            /** @example Bearer */
            token_type: string;
            /** Format: date-time */
            expires_at: string;
        };
        ApiResponseAuthToken: {
            data: components["schemas"]["AuthToken"];
            error: components["schemas"]["ErrorDTO"] | null;
        };
        UserMe: {
            /** Format: int64 */
            user_id: number;
            /** Format: email */
            email: string;
            phone: string;
            /** @enum {string} */
            role: "SEEKER" | "FINDER";
            /** Format: date-time */
            created_at: string;
        };
        ApiResponseUserMe: {
            data: components["schemas"]["UserMe"];
            error: components["schemas"]["ErrorDTO"] | null;
        };
        ClaimCreateRequest: {
            message: string;
        };
        Claim: {
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            item_id: number;
            /** Format: int64 */
            seeker_user_id: number;
            /**
             * @example PENDING
             * @enum {string}
             */
            status: "PENDING" | "APPROVED" | "REJECTED";
            message: string;
            /** Format: date-time */
            created_at: string;
        };
        ClaimSummary: components["schemas"]["Claim"] & {
            /** Format: date-time */
            updated_at: string;
        };
        PaginatedClaims: {
            claims: components["schemas"]["ClaimSummary"][];
            /** Format: int32 */
            total: number;
        };
        ApiResponseClaim: {
            data: components["schemas"]["Claim"];
            error: components["schemas"]["ErrorDTO"] | null;
        };
        ApiResponsePaginatedClaims: {
            data: components["schemas"]["PaginatedClaims"];
            error: components["schemas"]["ErrorDTO"] | null;
        };
        HandoverActionRequest: {
            /**
             * @description CLAIM: STORED → CLAIMED (클레임 접수 처리)
             *     HANDOVER: CLAIMED → HANDED_OVER (최종 인계 완료)
             *
             * @enum {string}
             */
            action: "CLAIM" | "HANDOVER";
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getUnreadNotificationCount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseUnreadCount"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseError"];
                };
            };
        };
    };
    register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthRegisterRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    /** @description Resource pointer (e.g., /v1/me) */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseUserMe"];
                };
            };
            /** @description Validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseError"];
                };
            };
            /** @description Duplicate email/phone */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseError"];
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthLoginRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseAuthToken"];
                };
            };
            /** @description Invalid credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseError"];
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseError"];
                };
            };
        };
    };
    getMe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseUserMe"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseError"];
                };
            };
        };
    };
    listMyItems: {
        parameters: {
            query?: {
                status?: "STORED" | "HANDED_OVER";
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponsePaginatedItems"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseError"];
                };
            };
        };
    };
    createClaimForItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ClaimCreateRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    /** @description Created claim URI */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseClaim"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseError"];
                };
            };
            /** @description Item not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseError"];
                };
            };
        };
    };
    listClaims: {
        parameters: {
            query?: {
                status?: "PENDING" | "APPROVED" | "REJECTED";
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponsePaginatedClaims"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseError"];
                };
            };
        };
    };
    getClaimById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseClaim"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseError"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseError"];
                };
            };
        };
    };
    listNotifications: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseNotificationList"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseError"];
                };
            };
        };
    };
    markNotificationRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseError"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseError"];
                };
            };
        };
    };
    handoverItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["HandoverActionRequest"];
            };
        };
        responses: {
            /** @description OK (updated item) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseItemRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseError"];
                };
            };
            /** @description Forbidden role */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseError"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseError"];
                };
            };
            /** @description Invalid state transition */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiResponseError"];
                };
            };
        };
    };
}
